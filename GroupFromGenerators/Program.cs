using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using AbstractAlgebraCartesianProduct;
using AbstractAlgebraFunctionIntInt;
using AbstractAlgebraCycles;

using static System.Console;

namespace GroupFromGenerators
{
    class Program
    {

        // Abstract Algebra in GAP - Alexander Hulpke
        // 3.23 -> Groups generated by elements -> How to calculate elements

        static (int i, List<FunctionIntInt>) GroupFromGeneratorsAlt(IEnumerable<FunctionIntInt> set, FunctionIntInt identity)
        {
            var i = 1;

            var items = new List<FunctionIntInt>();

            var set_ = set.Concat(set.Select(elt => elt.Inverse()));


            //var new_items = new List<FunctionIntInt>();


            //foreach (var elt in set_)
            //{
            //    if (items.Contains(identity.Compose(elt)) == false && new_items.Contains(identity.Compose(elt)) == false)
            //        new_items.Add(identity.Compose(elt));
            //}

            //items.AddRange(new_items);

            var new_items = new List<FunctionIntInt>() { identity };

            while (true)
            {
                var items_temp = new List<FunctionIntInt>(new_items);

                new_items.Clear();

                foreach (var item in items_temp)
                    foreach (var elt in set_)
                    {
                        var result = item.Compose(elt);

                        if (items.Contains(result) == false && new_items.Contains(result) == false)
                            new_items.Add(result);
                    }
                        

                if (new_items.Count() == 0) break;
                                
                items.AddRange(new_items);

                i++;
            }

            return (i, items);
        }

        static (int i, List<FunctionIntInt>) GroupFromGeneratorsAlt(int n, params string[] items) =>
            GroupFromGeneratorsAlt(
                items.Select(str => Cycles.from_string(str).to_permutation(n)),
                Cycles.from_string("()").to_permutation(n));


        static (int i, List<FunctionIntInt>) GroupFromGenerators(IEnumerable<FunctionIntInt> set, FunctionIntInt identity)
        {
            var items = new List<FunctionIntInt>() { identity };

            var i = 1;
                                                
            while (true)
            {
                var added = false;

                foreach (var elt in
                    Enumerable.Repeat(set, i)
                    //Enumerable.Repeat(set.Concat(set.Select(elt => elt.Inverse())), i)
                    .CartesianProduct()
                    .Select(ls => ls.Aggregate((x, y) => x.Compose(y))))
                {
                    if (items.Contains(elt) == false)
                    {
                        items.Add(elt);
                        added = true;

                        // WriteLine("items.Count: {0}    i: {1}", items.Count(), i);
                    }
                }

                if (added == false) break;

                i++;
            }

            return (i, items);
        }

        static (int i, List<FunctionIntInt>) GroupFromGenerators(int n, params string[] items) =>
            GroupFromGenerators(
                items.Select(str => Cycles.from_string(str).to_permutation(n)),
                Cycles.from_string("()").to_permutation(n));

        static void ShowInfo((int i, IEnumerable<FunctionIntInt> items) tuple) => WriteLine("i: {0,4}    count: {1,4}", tuple.i, tuple.items.Count());
        
        static void Main(string[] args)
        {
            ShowInfo(GroupFromGenerators(4, "(12)", "(1234)"));
            ShowInfo(GroupFromGenerators(5, "(12)", "(12345)"));
            // ShowInfo(GroupFromGenerators(6, "(12)", "(123456)"));

            ShowInfo(GroupFromGeneratorsAlt(4, "(12)", "(1234)"));
            ShowInfo(GroupFromGeneratorsAlt(5, "(12)", "(12345)"));
            ShowInfo(GroupFromGeneratorsAlt(6, "(12)", "(123456)"));
            // ShowInfo(GroupFromGeneratorsAlt(7, "(12)", "(1234567)"));
        }
    }
}
